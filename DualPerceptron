# # realize the DualPercepton algorithm and visualize the process
import numpy as np
import matplotlib.pyplot as plt

def createdata():
    data=np.array([[2, 1],[4,1],[3.5,4],[3,2.2],[1,4],[0.5,2],[2,2.3],[1, 0.5]])
    label=[-1,-1,1,-1,1,1,1,-1]
    return data,label

class DualPerceptron:
    def __init__(self,data,label,rate=1):
        self.data=data
        self.label=np.array(label)
        self.rate=rate
        self.a=np.zeros((data.shape[0],1))
        self.b=0
        self.gam=np.zeros((data.shape[0],data.shape[0]))

    def creategam(self):
        for i in range(self.data.shape[0]):
            for j in range(self.data.shape[0]):
                self.gam[i][j]=self.data[i][0]*data[j][0]+self.data[i][1]*data[j][1]
    def judge(self,i):
        a_x_y=self.label.reshape(self.a.shape)*self.a
        if (int(np.dot(self.gam[i],a_x_y))+self.b)*self.label[i]<=0:
            return True
        else:
            return False


    def update(self,i):
        self.a[i]=self.a[i]+self.rate
        self.b=self.b+self.rate*self.label[i]

    def trian(self):
        Flag=True
        count=0
        iter=1
        while Flag:
            for i in range(self.label.__len__()):
                if self.judge(i):
                    print('iteration ', iter, ': point is ', self.data[i],
                          'a,b is ', self.a.reshape(1,self.a.shape[0]), self.b)
                    self.update(i)
                    iter=iter+1
                    count=0
                    break
                else:
                    count = count + 1
            if count==self.data.shape[0]:
                print('the best a,b is:',self.a.reshape(1,self.a.shape[0]), self.b)
                w=np.array([0,0])
                for i in range(self.label.__len__()):
                    w=w+self.a[i]*label[i]*np.array(data[i])
                print('the w,b is:', w, self.b)
                Flag=False
        return w,self.b



if __name__ == '__main__':
    data,label=createdata();
    myPerceptron=DualPerceptron(data,label)
    myPerceptron.creategam()
    w, b = myPerceptron.trian()
    A = []
    B = []
    for i in range(label.__len__()):
        if label[i] == 1:
            A.append(data[i])

    for i in range(label.__len__()):
        if label[i] == -1:
            B.append(data[i])

    plt.figure(1)
    plt.title('Perceptron Learning Algorithm', size=14)
    plt.xlabel('x0-axis', size=14)
    plt.ylabel('x1-axis', size=14)
    for i in range(A.__len__()):
        plt.scatter(A[i][0], A[i][1], marker='x')
    for i in range(B.__len__()):
        plt.scatter(B[i][0], B[i][1], marker='.')


    def expression(w, b, x):
        y = (-b - w[0] * x) / w[1]  # 注意在此，把x0，x1当做两个坐标轴，把x1当做自变量，x2为因变量
        return y


    xData = np.linspace(0, 5, 100)
    yData = expression(w, b, xData)
    plt.plot(xData, yData, color='r', label='sample data')
    plt.show()
