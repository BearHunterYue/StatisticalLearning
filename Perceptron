# realize the Perceptron algorithm and visualize the process
import numpy as np
import matplotlib.pyplot as plt
# data
def createdata():
    data = np.array([[2, 1],[4,1],[3.5,4],[3,2.2],[1,4],[0.5,2],[2,2.3],[1, 0.5]])
    label = [-1,-1,1,-1,1,1,1,-1]
    return data,label

# Percepton class
class Perceptron:
    # initial function initialize the parameters
    def __init__(self,data,label,rate=1):
        self.data=data
        self.label=label
        self.w=np.zeros((data.shape[1],1))#Column vector
        self.b=0
        self.rate=rate

    #define the judge function to judge if the data is valid
    def judge(self,x,xlabel,w,b):
        if (int(np.dot(x,w))+b)*xlabel<=0:
            return True
        else:
            return False

    # update function update the parameters w and b
    def update(self,x,xlabel):
        self.w=self.w+(x*self.rate*xlabel).reshape(self.w.shape)
        self.b=self.b+self.rate*xlabel

    # train function to train the model
    # output the w,b,x at each iteration
    def train(self):
        Flag=True
        count=0
        iter = 1
        while Flag:
            for i in range(self.data.shape[0]):
                #print(self.judge(self.data[i], self.label[i], self.w, self.b))
                if self.judge(self.data[i], self.label[i], self.w, self.b):
                    xnew = self.data[i]
                    ynew = self.label[i]
                    print('iteration ', iter, ': point is ', xnew, 'w,b is ', self.w, self.b)
                    self.update(xnew, ynew)
                    iter=iter+1
                    count=0
                    break
                else:
                   count=count+1
            #print(count,self.data.shape[0])
            if count==self.data.shape[0]:
                print('the best w,b is:',self.w,self.b)
                Flag = False
        return self.w,self.b


if __name__ == '__main__':
    data,label=createdata()
    myPerceptron=Perceptron(data,label)
    w,b=myPerceptron.train()
    A=[]
    B=[]
    for i in range(label.__len__()):
        if label[i]==1:
            A.append(data[i])

    for i in range(label.__len__()):
        if label[i]== -1:
            B.append(data[i])

    plt.figure(1)
    plt.title('Perceptron Learning Algorithm', size=14)
    plt.xlabel('x0-axis', size=14)
    plt.ylabel('x1-axis', size=14)
    for i in range(A.__len__()):
        plt.scatter(A[i][0], A[i][1],marker='x')
    for i in range(B.__len__()):
        plt.scatter(B[i][0], B[i][1],marker='.')

    def expression(w,b,x):
        y=(-b-w[0]*x)/w[1]#注意在此，把x0，x1当做两个坐标轴，把x1当做自变量，x2为因变量
        return y

    xData = np.linspace(0, 5, 100)
    yData = expression(w,b,xData)
    plt.plot(xData, yData, color='r', label='sample data')
    plt.show()
